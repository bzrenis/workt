/**
 * Test delle correzioni PDF: viaggi compatti, giorni reperibilit√†, compensi reali
 */

const fs = require('fs');

console.log('=== TEST CORREZIONI PDF ===\n');

try {
  const content = fs.readFileSync('./src/services/MonthlyPrintService.js', 'utf8');
  
  console.log('üîç Verificando le correzioni applicate:\n');
  
  // 1. Viaggi compatti (non pi√π con join('<br>'))
  const hasCompactTravel = content.includes('travelInfo.join(\' | \')') && 
                          !content.includes('travelInfo.join(\'<br>\')');
  console.log(`${hasCompactTravel ? '‚úÖ' : '‚ùå'} Viaggi in formato compatto (separati da |)`);
  
  // 2. Giorni solo reperibilit√†
  const hasStandbyDays = content.includes('standbyData.forEach(standbyDay') &&
                         content.includes('Giorno di sola reperibilit√†');
  console.log(`${hasStandbyDays ? '‚úÖ' : '‚ùå'} Gestione giorni di sola reperibilit√†`);
  
  // 3. Compensi reali (non pi√π hardcoded)
  const hasRealAllowances = content.includes('realTravelAllowance') && 
                           content.includes('realStandbyAllowance');
  console.log(`${hasRealAllowances ? '‚úÖ' : '‚ùå'} Compensi reali (non pi√π hardcoded)`);
  
  // 4. Interventi reperibilit√† multipli campi
  const hasStandbyInterventions = content.includes('standby_interventions') &&
                                 content.includes('reperibilita_interventi') &&
                                 content.includes('interventi_reperibilita');
  console.log(`${hasStandbyInterventions ? '‚úÖ' : '‚ùå'} Gestione multipla campi interventi reperibilit√†`);
  
  // 5. Combinazione dati work + standby
  const hasAllEntries = content.includes('allEntries.sort') &&
                       content.includes('allEntries.forEach');
  console.log(`${hasAllEntries ? '‚úÖ' : '‚ùå'} Combinazione inserimenti lavoro + giorni standby`);
  
  // 6. Passaggio standbyData a generateDailyEntries
  const hasStandbyParam = content.includes('generateDailyEntries(workEntries, settings, standbyData)');
  console.log(`${hasStandbyParam ? '‚úÖ' : '‚ùå'} Passaggio dati standby alla generazione tabella`);
  
  console.log('\nüìä Analisi dettagliata dei campi:\n');
  
  // Verifica viaggi
  if (content.includes('travelDisplay')) {
    console.log('‚úÖ Campo travelDisplay implementato per visualizzazione compatta');
  }
  
  // Verifica compensi
  if (content.includes('entry.travel_allowance && entry.travel_allowance > 0')) {
    console.log('‚úÖ Controllo compenso trasferta reale');
  }
  
  if (content.includes('entry.standby_allowance && entry.standby_allowance > 0')) {
    console.log('‚úÖ Controllo compenso reperibilit√† reale');
  }
  
  // Verifica interventi
  const interventionChecks = [
    'entry.standby_interventions',
    'entry.reperibilita_interventi', 
    'entry.interventi_reperibilita',
    'interventi.length > 0 && entry.is_standby_day'
  ];
  
  const foundChecks = interventionChecks.filter(check => content.includes(check));
  console.log(`‚úÖ Controlli interventi: ${foundChecks.length}/${interventionChecks.length} implementati`);
  
  console.log('\nüéØ RISULTATO:');
  const allFixed = hasCompactTravel && hasStandbyDays && hasRealAllowances && 
                   hasStandbyInterventions && hasAllEntries && hasStandbyParam;
  
  if (allFixed) {
    console.log('‚úÖ TUTTE LE CORREZIONI SONO STATE APPLICATE!');
    console.log('‚úÖ Viaggi ora vengono mostrati in formato compatto');
    console.log('‚úÖ Giorni di sola reperibilit√† verranno inclusi nella tabella');
    console.log('‚úÖ Compensi trasferta e reperibilit√† mostrano valori reali');
    console.log('‚úÖ Interventi reperibilit√† controllano multipli campi del database');
  } else {
    console.log('‚ùå Alcune correzioni potrebbero essere incomplete');
  }
  
} catch (error) {
  console.error('‚ùå Errore durante la verifica:', error.message);
}
