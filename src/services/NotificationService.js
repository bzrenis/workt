// üöÄ NOTIFICATIONSERVICE ENHANCED
// Sistema ENHANCED: JavaScript Timer + Background Timer per persistenza
// Garantisce notifiche con app APERTA e maggiore persistenza in background

import AsyncStorage from '@react-native-async-storage/async-storage';
import DatabaseService from './DatabaseService';
import { Platform, Alert, AppState } from 'react-native';
import BackgroundTimer from 'react-native-background-timer';
import AlternativeNotificationService from './AlternativeNotificationService';
import EnhancedNotificationService from './PushNotificationService';
import NativeNotificationService from './NativeNotificationService';

class NotificationService {
  constructor() {
    this.schedulingInProgress = false;
    this.lastScheduleTime = 0;
    this.appState = AppState.currentState;
    
    // üöÄ SISTEMA ENHANCED: JavaScript + Background Timer + Native Ready
    this.alternativeService = new AlternativeNotificationService();
    this.enhancedService = EnhancedNotificationService;
    this.nativeService = NativeNotificationService; // Sistema native-ready
    this.useEnhancedSystem = true; // Sistema enhanced attivo
    this.enhancedInitialized = false;
    
    console.log('üöÄ NotificationService ENHANCED inizializzato');
    console.log('‚úÖ Sistema: JavaScript Timer + Background Timer + Native Ready');
    console.log('üì± Native Status:', this.nativeService.getSystemStatus());
    
    // Monitora stato app per gestione enhanced
    this.setupAppStateHandler();
  }

  // ‚úÖ GESTIONE STATO APP per sistema enhanced
  setupAppStateHandler() {
    AppState.addEventListener('change', (nextAppState) => {
      console.log(`üîÑ App state: ${this.appState} ‚Üí ${nextAppState}`);
      
      if (this.appState === 'background' && nextAppState === 'active') {
        console.log('üì± App tornata attiva - verifica sistema enhanced');
        this.handleAppBecameActive();
      } else if (this.appState === 'active' && nextAppState === 'background') {
        console.log('üì± App in background - background timers attivi');
        this.handleAppWentBackground();
      }
      
      this.appState = nextAppState;
    });
  }

  async handleAppBecameActive() {
    console.log('‚úÖ App attiva - usando JavaScript Timers per velocit√†');
    // Quando app torna attiva, usa JavaScript per velocit√† e controlla notifiche perse
    await this.rescheduleOnForeground();
  }

  async handleAppWentBackground() {
    console.log('üîÑ App in background - Background Timers gestiscono persistenza');
    // Background timers continuano a funzionare
  }

  // ‚úÖ INIZIALIZZAZIONE SISTEMA ENHANCED
  async initialize() {
    if (!this.enhancedInitialized) {
      console.log('üöÄ Inizializzazione sistema Enhanced per background...');
      const success = await this.enhancedService.initialize();
      this.enhancedInitialized = success;
      
      if (success) {
        console.log('‚úÖ Sistema enhanced pronto: JavaScript + Background Timer');
      } else {
        console.warn('‚ö†Ô∏è Enhanced fallito - usando solo JavaScript');
      }
    }
    return this.enhancedInitialized;
  }

  // ‚úÖ RICHIESTA PERMESSI (Enhanced per background)
  async requestPermissions() {
    await this.initialize();
    
    if (this.enhancedInitialized) {
      const hasPerms = await this.enhancedService.requestPermissions();
      console.log(`üì± Permessi enhanced: ${hasPerms ? 'CONCESSI' : 'NEGATI'}`);
      return hasPerms;
    }
    
    console.log('‚úÖ JavaScript Alert sempre disponibile come fallback');
    return true;
  }

  async hasPermissions() {
    await this.initialize();
    
    if (this.enhancedInitialized) {
      return await this.enhancedService.hasPermissions();
    }
    
    console.log('‚úÖ JavaScript Alert sempre disponibile');
    return true;
  }

  // Carica le impostazioni notifiche
  async getSettings() {
    try {
      const stored = await AsyncStorage.getItem('notification_settings');
      console.log('üìñ Caricando impostazioni notifiche da storage...');
      
      if (stored) {
        const settings = JSON.parse(stored);
        console.log('‚úÖ Impostazioni notifiche caricate:', JSON.stringify(settings, null, 2));
        return settings;
      } else {
        console.log('‚ö†Ô∏è Nessuna impostazione salvata, uso default');
        const defaultSettings = this.getDefaultSettings();
        console.log('üîß Impostazioni default:', JSON.stringify(defaultSettings, null, 2));
        return defaultSettings;
      }
    } catch (error) {
      console.error('‚ùå Errore nel caricamento impostazioni notifiche:', error);
      const defaultSettings = this.getDefaultSettings();
      console.log('üîß Fallback alle impostazioni default:', JSON.stringify(defaultSettings, null, 2));
      return defaultSettings;
    }
  }

  // Impostazioni predefinite
  getDefaultSettings() {
    return {
      enabled: false,
      workReminders: {
        enabled: false,
        morningTime: '08:00',
        eveningTime: '17:00',
        weekendsEnabled: false
      },
      timeEntryReminders: {
        enabled: false,
        time: '18:00',
        weekendsEnabled: false
      },
      standbyReminders: {
        enabled: false,
        notifications: [
          {
            enabled: true,
            daysInAdvance: 1,
            time: '20:00',
            message: 'Domani sei in reperibilit√†. Assicurati di essere disponibile!'
          },
          {
            enabled: false,
            daysInAdvance: 0,
            time: '08:00',
            message: 'Oggi sei in reperibilit√†. Tieni il telefono sempre a portata di mano!'
          },
          {
            enabled: false,
            daysInAdvance: 2,
            time: '19:00',
            message: 'Tra 2 giorni sarai in reperibilit√†. Preparati per essere disponibile!'
          }
        ]
      },
      vacationReminders: {
        enabled: false,
        time: '09:00',
        daysInAdvance: 7
      },
      overtimeAlerts: {
        enabled: false,
        hoursThreshold: 8.5
      },
      dailySummary: {
        enabled: false,
        time: '19:00'
      }
    };
  }

  // Salva le impostazioni
  async saveSettings(settings) {
    try {
      console.log('üíæ Salvando impostazioni notifiche:', JSON.stringify(settings, null, 2));
      await AsyncStorage.setItem('notification_settings', JSON.stringify(settings));
      console.log('‚úÖ Impostazioni notifiche salvate con successo');
      return true;
    } catch (error) {
      console.error('‚ùå Errore nel salvataggio impostazioni notifiche:', error);
      return false;
    }
  }

  // üöÄ SEMPRE ENHANCED (JavaScript + Background Timer)
  shouldUseAlternativeSystem() {
    return this.appState === 'active'; // JavaScript quando app attiva
  }

  shouldUseEnhancedSystem() {
    return this.enhancedInitialized; // Enhanced sempre disponibile per background
  }

  isExpoDisabled() {
    return true; // Expo completamente rimosso
  }

  // üöÄ PROGRAMMAZIONE SISTEMA ENHANCED
  async scheduleNotifications(settings = null, forceReschedule = false) {
    try {
      const now = Date.now();
      if (this.schedulingInProgress) {
        console.log('üì± Programmazione notifiche gi√† in corso, saltando...');
        return;
      }
      
      // Throttling 30 minuti (ma pu√≤ essere ignorato con forceReschedule)
      if (!forceReschedule && now - this.lastScheduleTime < 1800000) { 
        const remainingTime = Math.round((1800000 - (now - this.lastScheduleTime)) / 60000);
        console.log(`üì± Notifiche programmate di recente, prossima programmazione tra ${remainingTime} minuti`);
        return;
      }

      if (forceReschedule) {
        console.log('üîÑ Riprogrammazione forzata sistema enhanced');
      }

      this.schedulingInProgress = true;
      this.lastScheduleTime = now;

      console.log('üöÄ === PROGRAMMAZIONE SISTEMA ENHANCED ===');
      console.log('üì± JavaScript Timers (app aperta) + Background Timers (persistenza)');

      // Inizializza sistema enhanced se necessario
      await this.initialize();

      if (!settings) {
        console.log('üîç Caricando impostazioni notifiche per programmazione...');
        settings = await this.getSettings();
      } else {
        console.log('üìù Usando impostazioni fornite per programmazione');
      }
      
      console.log('üìã Impostazioni correnti per programmazione:', JSON.stringify(settings, null, 2));

      // Cancella notifiche esistenti (entrambi i sistemi)
      console.log('üóëÔ∏è Cancellazione notifiche esistenti (JavaScript + Enhanced)...');
      this.alternativeService.clearAllTimers();
      if (this.enhancedInitialized) {
        await this.enhancedService.cancelAllNotifications();
      }

      if (!settings.enabled) {
        console.log('üì± ‚ùå Notifiche DISABILITATE nelle impostazioni globali');
        console.log('üì± ‚ùå settings.enabled =', settings.enabled);
        return;
      } else {
        console.log('üì± ‚úÖ Notifiche ABILITATE nelle impostazioni globali');
        console.log('üì± ‚úÖ settings.enabled =', settings.enabled);
      }

      let totalJSScheduled = 0;
      let totalEnhancedScheduled = 0;
      
      // ‚è∞ PROMEMORIA LAVORO
      if (settings.workReminders?.enabled) {
        console.log('üì± ‚è∞ Programmando promemoria lavoro...');
        
        // JavaScript per app attiva
        const jsWorkCount = await this.alternativeService.scheduleAlternativeWorkReminders(settings.workReminders);
        totalJSScheduled += jsWorkCount;
        
        // Enhanced per background persistence
        if (this.enhancedInitialized) {
          const enhancedWorkCount = await this.enhancedService.scheduleWorkReminders(settings.workReminders);
          totalEnhancedScheduled += enhancedWorkCount;
        }
        
        console.log(`‚úÖ Promemoria lavoro: ${jsWorkCount} JS + ${this.enhancedInitialized ? 'Enhanced attivo' : 'Enhanced non disponibile'}`);
      }
      
      // ‚úçÔ∏è PROMEMORIA INSERIMENTO ORARIO
      if (settings.timeEntryReminders?.enabled) {
        console.log('üì± ‚úçÔ∏è Programmando promemoria inserimento orario...');
        
        // JavaScript per app attiva
        const jsEntryCount = await this.alternativeService.scheduleAlternativeTimeEntryReminders(settings.timeEntryReminders);
        totalJSScheduled += jsEntryCount;
        
        // Enhanced per background persistence
        if (this.enhancedInitialized) {
          const enhancedEntryCount = await this.enhancedService.scheduleTimeEntryReminders(settings.timeEntryReminders);
          totalEnhancedScheduled += enhancedEntryCount;
        }
        
        console.log(`‚úÖ Promemoria inserimento: ${jsEntryCount} JS + ${this.enhancedInitialized ? 'Enhanced attivo' : 'Enhanced non disponibile'}`);
      }
      
      // üìä RIEPILOGO GIORNALIERO
      if (settings.dailySummary?.enabled) {
        console.log('üì± üìä Programmando riepilogo giornaliero...');
        
        const jsSummaryCount = await this.alternativeService.scheduleAlternativeDailySummary(settings.dailySummary);
        totalJSScheduled += jsSummaryCount;
        
        console.log(`‚úÖ ${jsSummaryCount} timer JavaScript riepilogo attivati`);
      }
      
      // üìû PROMEMORIA REPERIBILIT√Ä
      if (settings.standbyReminders?.enabled) {
        console.log('üì± üìû Programmando promemoria reperibilit√†...');
        
        try {
          const endDate = new Date();
          endDate.setMonth(endDate.getMonth() + 2);
          
          // Ottieni date reperibilit√†
          let standbyDates;
          if (this.enhancedInitialized) {
            standbyDates = await this.enhancedService.getStandbyDates(new Date(), endDate);
          } else {
            standbyDates = await this.getStandbyDatesFromSettings(new Date(), endDate);
          }
          
          if (standbyDates.length > 0) {
            // JavaScript per app attiva
            const jsStandbyCount = await this.alternativeService.scheduleAlternativeStandbyReminders(standbyDates, settings.standbyReminders);
            totalJSScheduled += jsStandbyCount;
            
            // Enhanced per background persistence
            if (this.enhancedInitialized) {
              const enhancedStandbyCount = await this.enhancedService.scheduleStandbyReminders(standbyDates, settings.standbyReminders);
              totalEnhancedScheduled += enhancedStandbyCount;
            }
            
            console.log(`‚úÖ Reperibilit√†: ${jsStandbyCount} JS + ${this.enhancedInitialized ? 'Enhanced attivo' : 'Enhanced non disponibile'}`);
            console.log(`üìû Date trovate: ${standbyDates.slice(0, 3).join(', ')}${standbyDates.length > 3 ? ' e altre...' : ''}`);
          } else {
            console.log('üìû Nessuna data di reperibilit√† trovata');
          }
        } catch (error) {
          console.error('‚ùå Errore programmazione reperibilit√†:', error);
        }
      }

      // Verifica finale
      const jsStats = this.alternativeService.getActiveTimersStats();
      const enhancedCount = this.enhancedInitialized ? this.enhancedService.getScheduledCount() : 0;
      
      console.log(`‚úÖ üéØ PROGRAMMAZIONE ENHANCED COMPLETATA!`);
      console.log(`   üöÄ Timer JavaScript (app aperta): ${jsStats.total}`);
      console.log(`   ÔøΩ Enhanced Background Timers: ${enhancedCount}`);
      console.log(`   üîÑ Sistema: ${this.enhancedInitialized ? 'ENHANCED COMPLETO' : 'Solo JavaScript'}`);
      
      if (jsStats.total > 0) {
        console.log('üöÄ TIMER JAVASCRIPT ATTIVI:');
        console.log(`   Totale: ${jsStats.total}`);
        console.log(`   Per tipo:`, jsStats.byType);
        if (jsStats.nextNotification) {
          console.log(`   Prossimo: ${jsStats.nextNotification.title} alle ${jsStats.nextNotification.scheduledFor.toLocaleString('it-IT')}`);
        }
      }

      if (enhancedCount > 0) {
        console.log(`ÔøΩ BACKGROUND TIMERS ATTIVI: ${enhancedCount} (maggiore persistenza in background!)`);
      }

      if (!this.enhancedInitialized) {
        console.warn('‚ö†Ô∏è ATTENZIONE: Enhanced system non disponibile - solo JavaScript timers attivi');
        console.warn('   Le notifiche funzioneranno SOLO con app aperta');
      } else {
        console.log('‚úÖ SISTEMA COMPLETO: Notifiche garantite sia ad app aperta che con maggiore persistenza!');
      }

    } catch (error) {
      console.error('‚ùå Errore nella programmazione notifiche enhanced:', error);
    } finally {
      this.schedulingInProgress = false;
    }
  }

  // üîî METODO UNIVERSALE: Mostra notifica con sistema migliore disponibile
  async showNotification(title, body, type = 'info', data = {}) {
    console.log(`üîî Mostro notifica: ${title}`);
    
    // üéØ PRIORIT√Ä: Nativo > Enhanced > Alternative
    const nativeStatus = this.nativeService.getSystemStatus();
    
    if (nativeStatus.isNativeReady) {
      console.log(`üöÄ [NATIVE] Usando notifiche push native`);
      return await this.nativeService.showNotification(title, body, { type, ...data });
    } else if (this.useEnhancedSystem && this.enhancedInitialized) {
      console.log(`üì± [ENHANCED] Usando sistema enhanced`);
      return await this.enhancedService.showAlert(title, body);
    } else {
      console.log(`üì¢ [FALLBACK] Usando Alert.alert`);
      return await this.alternativeService.showNotification(title, body, type);
    }
  }

  // Alert straordinario JavaScript
  async checkOvertimeAlert(workHours, settings = null) {
    try {
      if (!settings) {
        settings = await this.getSettings();
      }

      if (!settings.enabled || !settings.overtimeAlerts?.enabled) {
        console.log('‚ö†Ô∏è Controllo straordinario: notifiche disabilitate');
        return;
      }

      const threshold = settings.overtimeAlerts.hoursThreshold || 8.5;
      if (workHours <= threshold) {
        console.log(`‚ö†Ô∏è Controllo straordinario: ${workHours.toFixed(1)}h <= ${threshold}h (soglia non superata)`);
        return;
      }

      // Throttling 1 ora
      const lastOvertimeKey = 'last_overtime_notification';
      const lastOvertimeStr = await AsyncStorage.getItem(lastOvertimeKey);
      const now = Date.now();
      
      if (lastOvertimeStr) {
        const lastOvertime = parseInt(lastOvertimeStr);
        const timeDiff = now - lastOvertime;
        const minInterval = 3600000; // 1 ora
        
        if (timeDiff < minInterval) {
          const remainingMinutes = Math.round((minInterval - timeDiff) / 60000);
          console.log(`‚ö†Ô∏è Notifica straordinario gi√† inviata di recente, prossima tra ${remainingMinutes} minuti`);
          return;
        }
      }

      // Alert JavaScript immediato
      const alertTitle = '‚ö†Ô∏è Straordinario Rilevato';
      const alertBody = `Hai superato le ${threshold} ore giornaliere (${workHours.toFixed(1)}h totali). Ottimo lavoro!`;
      
      Alert.alert(
        alertTitle,
        alertBody,
        [
          { 
            text: 'OK', 
            onPress: () => {
              console.log('üëÜ Notifica straordinario confermata dall\'utente');
            }
          }
        ],
        { cancelable: true }
      );
      
      console.log(`‚úÖ Alert straordinario JavaScript mostrato: ${workHours.toFixed(1)}h > ${threshold}h`);

      // Salva timestamp
      await AsyncStorage.setItem(lastOvertimeKey, now.toString());
      
    } catch (error) {
      console.error('‚ùå Errore nel controllo notifica straordinario:', error);
    }
  }

  // Test notifica UNIVERSALE (Nativo + Enhanced + Fallback)
  async sendTestNotification() {
    console.log('üß™ Test notifica sistema completo...');
    
    await this.initialize();
    
    // üéØ Test con sistema universale
    await this.showNotification(
      'üß™ Test Sistema Notifiche',
      'Test del sistema di notifiche completo: Nativo + Enhanced + Fallback',
      'test',
      {
        onPress: () => {
          console.log('‚úÖ Test notifica confermato dall\'utente');
        }
      }
    );
    
    // üìä Mostra stato del sistema
    const nativeStatus = this.nativeService.getSystemStatus();
    console.log('üìä STATO SISTEMA COMPLETO:');
    console.log(`   üöÄ Native: ${nativeStatus.description}`);
    console.log(`   üì± Enhanced: ${this.enhancedInitialized ? 'Attivo' : 'Non disponibile'}`);
    console.log(`   üîÑ JavaScript: Sempre disponibile`);
    
    if (nativeStatus.isNativeReady) {
      console.log('‚úÖ Sistema COMPLETO: Notifiche push native al 100%!');
    } else if (this.enhancedInitialized) {
      console.log('‚úÖ Sistema ENHANCED: JavaScript + Background Timer');
    } else {
      console.log('‚úÖ Sistema FALLBACK: Solo JavaScript (app aperta)');
    }
  }

  // Cancella notifiche UNIVERSALI (Native + Enhanced + JavaScript) 
  async cancelAllNotifications() {
    console.log('üóëÔ∏è Cancellazione sistema completo...');
    
    // 1. Cancella notifiche native
    await this.nativeService.cancelAllNotifications();
    
    // 2. Cancella JavaScript timers
    if (this.alternativeService) {
      this.alternativeService.clearAllTimers();
      console.log('‚úÖ Timer JavaScript cancellati');
    }
    
    // 3. Cancella Enhanced notifications
    if (this.enhancedInitialized) {
      await this.enhancedService.cancelAllNotifications();
      console.log('‚úÖ Enhanced notifications cancellate');
    }
    
    console.log('‚úÖ Pulizia completa sistema universale (Native + Enhanced + JavaScript)');
  }

  // Ottieni statistiche ENHANCED
  async getScheduledNotifications() {
    const jsStats = this.alternativeService.getActiveTimersStats();
    const enhancedCount = this.enhancedInitialized ? this.enhancedService.getScheduledCount() : 0;
    
    const totalCount = jsStats.total + enhancedCount;
    
    console.log(`üìÖ Sistema enhanced - JS: ${jsStats.total}, Enhanced: ${enhancedCount}, Totale: ${totalCount}`);
    
    return { 
      count: totalCount,
      javascript: jsStats.total,
      enhanced: enhancedCount,
      stats: jsStats,
      type: this.enhancedInitialized ? 'enhanced_system' : 'javascript_only',
      backgroundSupported: this.enhancedInitialized
    };
  }

  // Date reperibilit√† dalle settings
  async getStandbyDatesFromSettings(startDate, endDate) {
    try {
      const startStr = typeof startDate === 'string' ? startDate : startDate.toISOString().split('T')[0];
      const endStr = typeof endDate === 'string' ? endDate : endDate.toISOString().split('T')[0];
      
      console.log(`üìû DEBUG: Cercando date reperibilit√† tra ${startStr} e ${endStr}`);
      
      const standbyDates = [];
      
      // Leggi dalle settings
      try {
        const settingsStr = await AsyncStorage.getItem('settings');
        if (settingsStr) {
          const settings = JSON.parse(settingsStr);
          const standbyDaysFromSettings = settings?.standbySettings?.standbyDays || {};
          
          console.log(`üìû DEBUG: Trovate ${Object.keys(standbyDaysFromSettings).length} date nelle settings`);
          
          Object.keys(standbyDaysFromSettings).forEach(dateStr => {
            const dayData = standbyDaysFromSettings[dateStr];
            if (dayData?.selected === true) {
              const checkDate = new Date(dateStr);
              const start = new Date(startStr);
              const end = new Date(endStr);
              
              if (checkDate >= start && checkDate <= end) {
                standbyDates.push(dateStr);
                console.log(`üìû DEBUG: Aggiunta data reperibilit√† dalle settings: ${dateStr}`);
              }
            }
          });
        }
      } catch (settingsError) {
        console.warn('üìû Errore lettura settings per reperibilit√†:', settingsError);
      }
      
      // Leggi dal database
      try {
        const databaseService = DatabaseService;
        const start = new Date(startStr);
        const end = new Date(endStr);
        
        let currentMonth = new Date(start.getFullYear(), start.getMonth(), 1);
        const endMonth = new Date(end.getFullYear(), end.getMonth(), 1);
        
        let iterationCount = 0;
        const maxIterations = 24;
        
        while (currentMonth <= endMonth && iterationCount < maxIterations) {
          const year = currentMonth.getFullYear();
          const month = currentMonth.getMonth() + 1;
          
          console.log(`üìû DEBUG: Verificando mese ${year}-${month.toString().padStart(2, '0')} nel database`);
          
          const monthStandbyDays = await databaseService.getStandbyDays(year, month);
          console.log(`üìû DEBUG: Trovati ${monthStandbyDays.length} giorni di reperibilit√† nel database mese ${year}-${month}`);
          
          for (const standbyDay of monthStandbyDays) {
            const standbyDate = new Date(standbyDay.date);
            
            if (standbyDate >= start && standbyDate <= end && !standbyDates.includes(standbyDay.date)) {
              standbyDates.push(standbyDay.date);
              console.log(`üìû DEBUG: Aggiunta data reperibilit√† dal database: ${standbyDay.date}`);
            }
          }
          
          currentMonth.setMonth(currentMonth.getMonth() + 1);
          iterationCount++;
        }
        
        if (iterationCount >= maxIterations) {
          console.warn('‚ö†Ô∏è AVVISO: Interrotto loop per protezione anti-infinito');
        }
      } catch (dbError) {
        console.warn('üìû Errore lettura database per reperibilit√†:', dbError);
      }
      
      const uniqueDates = [...new Set(standbyDates)].sort();
      
      console.log(`üìû Trovate ${uniqueDates.length} date di reperibilit√† totali tra ${startStr} e ${endStr}`);
      console.log(`üìû Date trovate:`, uniqueDates);
      
      return uniqueDates;
      
    } catch (error) {
      console.error('‚ùå Errore nel caricamento date reperibilit√†:', error);
      return [];
    }
  }

  // Statistiche notifiche
  async getNotificationStats() {
    const scheduled = await this.getScheduledNotifications();
    const settings = await this.getSettings();
    
    return {
      totalScheduled: scheduled.count,
      enabled: settings.enabled,
      activeReminders: [
        settings.workReminders.enabled && 'Promemoria lavoro',
        settings.timeEntryReminders.enabled && 'Inserimento orari',
        settings.dailySummary.enabled && 'Riepilogo giornaliero',
        settings.overtimeAlerts.enabled && 'Avvisi straordinario'
      ].filter(Boolean)
    };
  }

  // Placeholder per compatibilit√†
  async updateStandbyNotifications() {
    console.log('üìû updateStandbyNotifications: usando scheduleNotifications principale');
    const settings = await this.getSettings();
    await this.scheduleNotifications(settings);
  }

  setUseAlternativeSystem(enabled) {
    console.log(`üîÑ Sistema alternativo sempre attivo (JavaScript only)`);
  }

  async debugNotifications() {
    console.log('üîß === DEBUG SISTEMA IBRIDO ===');
    
    await this.initialize();
    
    const jsStats = this.alternativeService.getActiveTimersStats();
    const pushCount = this.pushInitialized ? this.pushService.getScheduledCount() : 0;
    const settings = await this.getSettings();
    
    console.log(`üîß Timer JavaScript attivi: ${jsStats.total}`);
    console.log(`üîß Push notifications attive: ${pushCount}`);
    console.log(`üîß Notifiche abilitate: ${settings.enabled}`);
    console.log(`üîß Sistema: ${this.pushInitialized ? 'Ibrido (JS + Push)' : 'Solo JavaScript'}`);
    console.log(`üîß Background supportato: ${this.pushInitialized}`);
    
    return {
      scheduledCount: jsStats.total + pushCount,
      javascriptCount: jsStats.total,
      pushCount: pushCount,
      settings: settings,
      system: this.pushInitialized ? 'hybrid' : 'javascript_only',
      backgroundSupported: this.pushInitialized
    };
  }

  // ‚úÖ LISTENER SISTEMA IBRIDO
  async setupNotificationListener() {
    console.log('‚úÖ setupNotificationListener Sistema IBRIDO');
    
    await this.initialize();
    
    if (this.pushInitialized) {
      console.log('üì± Sistema completo: JavaScript Alert + Push Notifications background');
      console.log('ÔøΩ Le notifiche funzionano sia ad app APERTA che CHIUSA!');
    } else {
      console.log('üì± Sistema parziale: Solo JavaScript Alert (app aperta)');
      console.log('‚ö†Ô∏è Push notifications non disponibili - notifiche solo ad app aperta');
    }
    
    console.log('üöÄ Sistema ibrido pronto');
    return this.pushInitialized;
  }

  // ‚úÖ METODI AGGIUNTIVI per compatibilit√† con API esistente
  async scheduleWorkReminders(settings) {
    console.log('üì± scheduleWorkReminders: usando sistema Nativo (expo-notifications)');
    // Cancella tutte le notifiche lavoro precedenti
    await this.nativeService.cancelAllNotifications();
    if (!settings.enabled) return 0;
    const [hours, minutes] = settings.morningTime.split(':');
    let scheduledCount = 0;
    // Programma per i prossimi 7 giorni
    const daysToSchedule = settings.weekendsEnabled ? [0, 1, 2, 3, 4, 5, 6] : [1, 2, 3, 4, 5];
    const now = new Date();
    for (let day = 1; day <= 7; day++) {
      for (const dayOfWeek of daysToSchedule) {
        const targetDate = new Date(now);
        targetDate.setDate(now.getDate() + day);
        if (targetDate.getDay() !== dayOfWeek) continue;
        targetDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        if (targetDate <= now) continue;
        await this.nativeService.scheduleNotification(
          'üåÖ Promemoria Lavoro',
          'Ricordati di registrare gli orari di lavoro di oggi.',
          targetDate.getTime(),
          { type: 'work_reminder', date: targetDate.toISOString().split('T')[0] }
        );
        scheduledCount++;
        console.log(`  ‚úÖ Promemoria lavoro programmato per ${targetDate.toLocaleDateString('it-IT')} alle ${hours}:${minutes}`);
      }
    }
    return scheduledCount;
  }

  async scheduleTimeEntryReminders(settings) {
    console.log('üì± scheduleTimeEntryReminders: usando sistema Nativo (expo-notifications)');
    await this.nativeService.cancelAllNotifications();
    if (!settings.enabled) return 0;
    const [hours, minutes] = settings.time.split(':');
    let scheduledCount = 0;
    const daysToSchedule = settings.weekendsEnabled ? [0, 1, 2, 3, 4, 5, 6] : [1, 2, 3, 4, 5];
    const now = new Date();
    for (let day = 1; day <= 7; day++) {
      for (const dayOfWeek of daysToSchedule) {
        const targetDate = new Date(now);
        targetDate.setDate(now.getDate() + day);
        if (targetDate.getDay() !== dayOfWeek) continue;
        targetDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        if (targetDate <= now) continue;
        await this.nativeService.scheduleNotification(
          'üìù Inserimento Orari',
          'Hai inserito gli orari di lavoro di oggi?',
          targetDate.getTime(),
          { type: 'time_entry_reminder', date: targetDate.toISOString().split('T')[0] }
        );
        scheduledCount++;
        console.log(`  ‚úÖ Promemoria inserimento programmato per ${targetDate.toLocaleDateString('it-IT')} alle ${hours}:${minutes}`);
      }
    }
    return scheduledCount;
  }

  async scheduleDailySummary(settings) {
    console.log('üì± scheduleDailySummary: usando sistema Nativo (expo-notifications)');
    await this.nativeService.cancelAllNotifications();
    if (!settings.enabled) return 0;
    const [hours, minutes] = settings.time.split(':');
    let scheduledCount = 0;
    const now = new Date();
    for (let day = 1; day <= 7; day++) {
      const targetDate = new Date(now);
      targetDate.setDate(now.getDate() + day);
      targetDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
      if (targetDate <= now) continue;
      await this.nativeService.scheduleNotification(
        'üìä Riepilogo Giornaliero',
        'Controlla il riepilogo delle tue ore e attivit√† di oggi.',
        targetDate.getTime(),
        { type: 'daily_summary', date: targetDate.toISOString().split('T')[0] }
      );
      scheduledCount++;
      console.log(`  ‚úÖ Riepilogo giornaliero programmato per ${targetDate.toLocaleDateString('it-IT')} alle ${hours}:${minutes}`);
    }
    return scheduledCount;
  }

  async scheduleStandbyReminders(standbyDates, settings) {
    console.log('üìû scheduleStandbyReminders: usando sistema Nativo (expo-notifications)');
    await this.nativeService.cancelAllNotifications();
    if (!settings.enabled) return 0;
    const activeNotifications = settings.notifications?.filter(n => n.enabled) || [];
    let scheduledCount = 0;
    const now = new Date();
    for (const dateStr of standbyDates) {
      const standbyDate = new Date(dateStr + 'T00:00:00');
      const standbyDateFormatted = standbyDate.toLocaleDateString('it-IT', { weekday: 'long', day: 'numeric', month: 'long' });
      for (const notification of activeNotifications) {
        const [hours, minutes] = notification.time.split(':');
        const reminderDate = new Date(standbyDate);
        reminderDate.setDate(reminderDate.getDate() - notification.daysInAdvance);
        reminderDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);
        if (reminderDate > now) {
          await this.nativeService.scheduleNotification(
            `üìû Reperibilit√†: ${standbyDateFormatted}`,
            notification.message || 'Ricordati che sei in reperibilit√†!',
            reminderDate.getTime(),
            { type: 'standby_reminder', standbyDate: dateStr, daysInAdvance: notification.daysInAdvance }
          );
          scheduledCount++;
          console.log(`  ‚úÖ Promemoria reperibilit√† programmato: ${standbyDateFormatted} (${dateStr}) alle ${hours}:${minutes}`);
        }
      }
    }
    return scheduledCount;
  }

  // Metodi per compatibilit√† che non fanno nulla (Expo rimosso)
  async initializeBackgroundFetch() {
    console.log('‚ùå initializeBackgroundFetch DISABILITATO: sistema JavaScript non usa background fetch');
    return true;
  }

  async syncStandbyNotificationsWithCalendar() {
    console.log('üìû syncStandbyNotificationsWithCalendar: controllo date reperibilit√† future');
    
    try {
      const settings = await this.getSettings();
      
      if (!settings.enabled || !settings.standbyReminders?.enabled) {
        console.log('üìû Notifiche reperibilit√† disabilitate');
        return {
          count: 0,
          dates: [],
          message: 'Notifiche reperibilit√† disabilitate nelle impostazioni'
        };
      }
      
      // Ottieni date reperibilit√† future (prossimi 2 mesi)
      const startDate = new Date();
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 2);
      
      const standbyDates = await this.getStandbyDatesFromSettings(startDate, endDate);
      
      if (standbyDates.length === 0) {
        console.log('üìû Nessuna data di reperibilit√† futura trovata');
        return {
          count: 0,
          dates: [],
          message: 'Nessuna data di reperibilit√† configurata per i prossimi 2 mesi'
        };
      }
      
      // Programma le notifiche
      await this.scheduleNotifications(settings);
      
      console.log(`üìû Sincronizzazione completata: ${standbyDates.length} date trovate`);
      console.log(`üìû Date: ${standbyDates.join(', ')}`);
      
      return {
        count: standbyDates.length,
        dates: standbyDates,
        message: `Trovate ${standbyDates.length} date di reperibilit√†: ${standbyDates.slice(0, 3).map(date => {
          const d = new Date(date);
          return d.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit' });
        }).join(', ')}${standbyDates.length > 3 ? ' e altre...' : ''}`
      };
      
    } catch (error) {
      console.error('‚ùå Errore nella sincronizzazione reperibilit√†:', error);
      return {
        count: 0,
        dates: [],
        message: 'Errore durante la sincronizzazione'
      };
    }
  }

  async cancelStandbyNotifications() {
    console.log('üìû cancelStandbyNotifications: cancellando timer JavaScript reperibilit√†');
    // Cancella solo i timer di reperibilit√†
    if (this.alternativeService) {
      const stats = this.alternativeService.getActiveTimersStats();
      console.log(`üóëÔ∏è Timer reperibilit√† da cancellare inclusi in ${stats.total} timer totali`);
      // Per ora cancella tutti - in futuro si pu√≤ implementare cancellazione selettiva
    }
    return true;
  }

  async forceScheduleNotifications() {
    console.log('üéØ forceScheduleNotifications: forzando programmazione JavaScript');
    
    // Reset throttling temporaneamente
    const originalLastScheduleTime = this.lastScheduleTime;
    this.lastScheduleTime = 0;
    this.schedulingInProgress = false;
    
    try {
      await this.scheduleNotifications(null, true);
      console.log('üéØ Programmazione forzata JavaScript completata');
    } finally {
      if (this.lastScheduleTime === 0) {
        this.lastScheduleTime = Date.now();
      }
    }
  }

  // üîÑ RIPROGRAMMAZIONE FOREGROUND: Sistema ibrido
  async rescheduleOnForeground() {
    console.log('üîÑ rescheduleOnForeground: app tornata attiva, verifica sistema ibrido...');
    
    try {
      const jsStats = this.alternativeService.getActiveTimersStats();
      const pushCount = this.pushInitialized ? this.pushService.getScheduledCount() : 0;
      
      console.log(`üìä Stato sistema dopo background:`);
      console.log(`   JavaScript timers: ${jsStats.total}`);
      console.log(`   Push notifications: ${pushCount}`);
      
      if (jsStats.total === 0 && pushCount === 0) {
        console.log('‚ö†Ô∏è Nessuna notifica attiva - riprogrammazione completa necessaria');
        await this.scheduleNotifications(null, true);
      } else if (jsStats.total === 0 && pushCount > 0) {
        console.log('üîÑ Solo push attive - riprogrammo JavaScript per velocit√† app attiva');
        await this.scheduleNotifications(null, true);
      } else {
        console.log(`‚úÖ Sistema funzionante: JS=${jsStats.total}, Push=${pushCount}`);
      }
      
      return { javascript: jsStats.total, push: pushCount };
    } catch (error) {
      console.error('‚ùå Errore verifica sistema ibrido:', error);
      // In caso di errore, riprogramma tutto
      await this.scheduleNotifications(null, true);
    }
  }

  async cleanupAllNotifications() {
    console.log('üßπ cleanupAllNotifications: pulizia timer JavaScript');
    await this.cancelAllNotifications();
    
    // Reset stato interno
    this.schedulingInProgress = false;
    this.lastScheduleTime = 0;
    
    const stats = this.alternativeService.getActiveTimersStats();
    console.log(`üßπ Pulizia completata. Timer rimanenti: ${stats.total}`);
    
    return stats.total === 0;
  }

  // ‚úÖ RIPRISTINA NOTIFICHE DA BACKUP (compatibilit√†)
  async restoreNotificationsFromBackup() {
    console.log('üîÑ restoreNotificationsFromBackup: usando scheduleNotifications principale');
    try {
      const settings = await this.getSettings();
      if (settings.enabled) {
        await this.scheduleNotifications(settings);
        console.log('‚úÖ Notifiche ripristinate da backup');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Errore ripristino notifiche da backup:', error);
    }
  }
}

export default new NotificationService();
