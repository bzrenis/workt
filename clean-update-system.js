/**
 * üßπ PULIZIA SISTEMA AGGIORNAMENTI
 * 
 * Reset completo del sistema popup versioni per evitare miscugli v1.3.0/v1.3.1
 */

// üßπ RESET COMPLETO SISTEMA AGGIORNAMENTI
global.resetUpdateSystemComplete = async () => {
  console.log('\nüßπ === RESET COMPLETO SISTEMA AGGIORNAMENTI ===');
  
  try {
    const { AsyncStorage } = require('@react-native-async-storage/async-storage');
    
    const keysToReset = [
      'pending_update_info',
      'last_known_version',
      'update_popup_shown_v1_3_0', 
      'update_popup_shown_v1_3_1',
      'force_update_notification_shown',
      'app_version_check_timestamp',
      'last_update_check'
    ];
    
    console.log('üîÑ Resetting chiavi sistema aggiornamento...');
    
    for (const key of keysToReset) {
      await AsyncStorage.removeItem(key);
      console.log(`‚úÖ Rimossa: ${key}`);
    }
    
    // Imposta versione corrente
    await AsyncStorage.setItem('last_known_version', '1.3.1');
    console.log('‚úÖ Impostata versione corrente: 1.3.1');
    
    console.log('\nüéØ SISTEMA PULITO - STATO:');
    console.log('‚Ä¢ Tutte le chiavi popup reset');
    console.log('‚Ä¢ Versione corrente: 1.3.1'); 
    console.log('‚Ä¢ Sistema pronto per funzionamento normale');
    console.log('‚Ä¢ No popup confusione v1.3.0/v1.3.1');
    
    return {
      status: 'success',
      keysReset: keysToReset.length,
      currentVersion: '1.3.1'
    };
    
  } catch (error) {
    console.error('‚ùå Errore reset sistema:', error);
    return { status: 'error', error: error.message };
  }
};

// üìä VERIFICA STATO SISTEMA AGGIORNAMENTI
global.checkUpdateSystemStatus = async () => {
  console.log('\nüìä === STATO SISTEMA AGGIORNAMENTI ===');
  
  try {
    const { AsyncStorage } = require('@react-native-async-storage/async-storage');
    
    const checks = {
      lastKnownVersion: await AsyncStorage.getItem('last_known_version'),
      pendingUpdate: await AsyncStorage.getItem('pending_update_info'),
      popupV130Shown: await AsyncStorage.getItem('update_popup_shown_v1_3_0'),
      popupV131Shown: await AsyncStorage.getItem('update_popup_shown_v1_3_1'),
      forceUpdateShown: await AsyncStorage.getItem('force_update_notification_shown')
    };
    
    console.log('üîç STATO ATTUALE:');
    Object.entries(checks).forEach(([key, value]) => {
      console.log(`‚Ä¢ ${key}: ${value || 'NULL'}`);
    });
    
    return checks;
    
  } catch (error) {
    console.error('‚ùå Errore verifica stato:', error);
    return { error: error.message };
  }
};

// üéØ IMPOSTA VERSIONE CORRENTE PULITA
global.setCleanVersion131 = async () => {
  console.log('\nüéØ === IMPOSTA VERSIONE CORRENTE PULITA ===');
  
  try {
    const { AsyncStorage } = require('@react-native-async-storage/async-storage');
    
    // Pulisci popup duplicati
    await AsyncStorage.removeItem('update_popup_shown_v1_3_0');
    await AsyncStorage.removeItem('pending_update_info');
    
    // Imposta versione corrente
    await AsyncStorage.setItem('last_known_version', '1.3.1');
    
    // Marca popup v1.3.1 come gi√† mostrato per evitare duplicati
    await AsyncStorage.setItem('update_popup_shown_v1_3_1', 'true');
    
    console.log('‚úÖ CONFIGURAZIONE PULITA:');
    console.log('‚Ä¢ Versione corrente: 1.3.1');
    console.log('‚Ä¢ Popup v1.3.0: rimosso');
    console.log('‚Ä¢ Popup v1.3.1: marcato come mostrato');
    console.log('‚Ä¢ Sistema pronto per normale funzionamento');
    
    return {
      status: 'success',
      currentVersion: '1.3.1',
      popupPrevention: 'active'
    };
    
  } catch (error) {
    console.error('‚ùå Errore impostazione versione:', error);
    return { status: 'error', error: error.message };
  }
};

// üîÑ RIAVVIA SERVIZIO AGGIORNAMENTI PULITO
global.restartUpdateService = async () => {
  console.log('\nüîÑ === RIAVVIO SERVIZIO AGGIORNAMENTI ===');
  
  try {
    // Reset completo
    await global.resetUpdateSystemComplete();
    
    // Imposta versione pulita
    await global.setCleanVersion131();
    
    console.log('üéâ SERVIZIO AGGIORNAMENTI RIAVVIATO');
    console.log('‚Ä¢ Sistema completamente pulito');
    console.log('‚Ä¢ Versione 1.3.1 impostata');
    console.log('‚Ä¢ Prevenzione popup duplicati attiva');
    console.log('‚Ä¢ Pronto per funzionamento normale');
    
    return {
      status: 'success',
      action: 'complete_restart',
      version: '1.3.1'
    };
    
  } catch (error) {
    console.error('‚ùå Errore riavvio servizio:', error);
    return { status: 'error', error: error.message };
  }
};

console.log('\nüßπ COMANDI PULIZIA SISTEMA CARICATI:');
console.log('‚Ä¢ resetUpdateSystemComplete() - Reset completo tutte le chiavi');
console.log('‚Ä¢ checkUpdateSystemStatus() - Verifica stato attuale');
console.log('‚Ä¢ setCleanVersion131() - Imposta versione 1.3.1 pulita');
console.log('‚Ä¢ restartUpdateService() - Riavvio completo servizio');
console.log('‚úÖ Sistema pulizia pronto!\n');
