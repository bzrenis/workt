/**
 * üé≠ TESTER COMPONENTI DEVELOPMENT
 * 
 * Comandi per testare e verificare i componenti di sviluppo
 */

// üîç CONTROLLA INFO BUILD CORRENTE
global.checkBuildInfo = () => {
  console.log('\nüîç === INFO BUILD CORRENTE ===');
  
  const Constants = require('expo-constants').default;
  
  const buildInfo = {
    __DEV__: __DEV__,
    appOwnership: Constants.appOwnership,
    executionEnvironment: Constants.executionEnvironment,
    isDevice: Constants.isDevice,
    platform: require('react-native').Platform.OS,
    appVersion: Constants.expoConfig?.version || Constants.manifest?.version,
    runtimeVersion: Constants.expoConfig?.runtimeVersion || Constants.manifest?.runtimeVersion,
    buildVersion: Constants.expoConfig?.ios?.buildNumber || Constants.expoConfig?.android?.versionCode
  };
  
  console.log('üìä BUILD INFO:');
  Object.entries(buildInfo).forEach(([key, value]) => {
    console.log(`‚Ä¢ ${key}: ${value}`);
  });
  
  // Determina tipo build
  let buildType = 'UNKNOWN';
  if (buildInfo.appOwnership === 'expo') {
    buildType = 'EXPO GO DEVELOPMENT';
  } else if (buildInfo.appOwnership === 'standalone' && buildInfo.__DEV__) {
    buildType = 'NATIVE DEVELOPMENT BUILD';
  } else if (buildInfo.appOwnership === 'standalone') {
    buildType = 'NATIVE PRODUCTION BUILD';
  }
  
  console.log(`\nüéØ TIPO BUILD: ${buildType}`);
  
  return {
    ...buildInfo,
    buildType
  };
};

// üé® TESTA COMPONENTI DEVELOPMENT VISIVAMENTE
global.testDevelopmentComponents = () => {
  console.log('\nüé® === TEST COMPONENTI DEVELOPMENT ===');
  
  const buildInfo = global.checkBuildInfo();
  
  console.log('‚úÖ COMPONENTI DEVELOPMENT:');
  console.log('‚Ä¢ DevelopmentWatermark: Badge angolo superiore destro');
  console.log('‚Ä¢ DevelopmentBanner: Banner inferiore animato');
  
  if (!buildInfo.__DEV__) {
    console.log('‚ö†Ô∏è ATTENZIONE: __DEV__ = false');
    console.log('‚Ä¢ I componenti development NON saranno visibili');
    console.log('‚Ä¢ Solo build di produzione/release nascondono i componenti');
  } else {
    console.log('‚úÖ __DEV__ = true - Componenti visibili');
    
    console.log('\nüéØ COSA DOVRESTI VEDERE:');
    
    if (buildInfo.appOwnership === 'expo') {
      console.log('‚Ä¢ Badge EXPO GO DEV (colore turchese)');
      console.log('‚Ä¢ Banner "üöÄ EXPO GO DEVELOPMENT"');
      console.log('‚Ä¢ Informazioni versione e runtime');
    } else if (buildInfo.appOwnership === 'standalone') {
      console.log('‚Ä¢ Badge NATIVE DEV (colore blu)');
      console.log('‚Ä¢ Banner "üì± NATIVE DEVELOPMENT BUILD"');
      console.log('‚Ä¢ Informazioni build nativa');
    }
  }
  
  return {
    buildType: buildInfo.buildType,
    componentsVisible: buildInfo.__DEV__,
    expectedBadgeColor: buildInfo.appOwnership === 'expo' ? 'turchese' : 'blu',
    expectedTitle: buildInfo.buildType
  };
};

// üîÑ SIMULA CAMBIO MODALIT√Ä (per test)
global.simulateBuildModeSwitch = () => {
  console.log('\nüîÑ === SIMULAZIONE CAMBIO MODALIT√Ä ===');
  
  const currentInfo = global.checkBuildInfo();
  
  console.log('üìã MODALIT√Ä CORRENTE:', currentInfo.buildType);
  console.log('\nüéØ PER TESTARE DIVERSE MODALIT√Ä:');
  console.log('');
  console.log('1Ô∏è‚É£ EXPO GO DEVELOPMENT:');
  console.log('   ‚Ä¢ Avvia con: expo start');
  console.log('   ‚Ä¢ Apri con Expo Go app');
  console.log('   ‚Ä¢ Badge: EXPO GO DEV (turchese)');
  console.log('');
  console.log('2Ô∏è‚É£ NATIVE DEVELOPMENT:');
  console.log('   ‚Ä¢ Build: eas build --profile development');
  console.log('   ‚Ä¢ Installa APK/IPA con __DEV__ = true');
  console.log('   ‚Ä¢ Badge: NATIVE DEV (blu)');
  console.log('');
  console.log('3Ô∏è‚É£ NATIVE PRODUCTION:');
  console.log('   ‚Ä¢ Build: eas build --profile production');
  console.log('   ‚Ä¢ Installa APK/IPA con __DEV__ = false');
  console.log('   ‚Ä¢ Badge: NON VISIBILE (production)');
  
  return {
    current: currentInfo.buildType,
    instructions: 'Vedi console per istruzioni cambio modalit√†'
  };
};

console.log('\nüé≠ COMANDI TESTER DEVELOPMENT CARICATI:');
console.log('‚Ä¢ checkBuildInfo() - Info build corrente');
console.log('‚Ä¢ testDevelopmentComponents() - Test componenti visivi');
console.log('‚Ä¢ simulateBuildModeSwitch() - Istruzioni cambio modalit√†');
console.log('‚úÖ Tester development pronto!\n');
